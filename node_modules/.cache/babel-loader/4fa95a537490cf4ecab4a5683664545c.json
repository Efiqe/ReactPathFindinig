{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js\";\nimport React, { useState, useEffect } from 'react';\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, drawPath } from './Bfs'; //GLOBAL\n\nconst cols = 10;\nconst rows = 10;\nlet grid;\nlet wall = [];\n\nconst delWall = (wall, deleteWallCords) => {\n  let y = deleteWallCords[0];\n  let x = deleteWallCords[1];\n  wall.forEach((el, idx) => {\n    if (el[0] === y && el[1] === x) {\n      wall.splice(idx, 1);\n    }\n  });\n};\n\nconst setWall = (wall, wallCords, grid) => {\n  wall.push(wallCords);\n  console.log(wallCords);\n  wall.forEach(el => {\n    console.log(el);\n    grid[el[0]][el[1]].isWall = true;\n  });\n};\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  const [togglePath, setTogglePath] = useState(0);\n  const [startCords, setStartCords] = useState([0, 0]);\n  const [endCords, setEndCords] = useState([rows - 1, cols - 1]);\n  const [wallCords, setWallCords] = useState([]);\n  const [deleteWallCords, setDeleteWallCords] = useState([]);\n  const START_ROW = startCords[0];\n  const START_COL = startCords[1];\n  const END_ROW = endCords[0];\n  const END_COL = endCords[1];\n  useEffect(() => {\n    initalizeGrid();\n  }, [togglePath, startCords, endCords]); //Inicializace gridu\n\n  const initalizeGrid = () => {\n    grid = []; //Filling grid with spots\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = [];\n\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n\n    let start = grid[START_ROW][START_COL];\n    let end = grid[END_ROW][END_COL];\n    setGrid(grid);\n    const dict = BFS(grid, start, end);\n    const path = drawPath(dict, [start.y, start.x], [end.y, end.x]);\n\n    if (togglePath === 1) {\n      fillPath(grid, path);\n    }\n  }; // Vytvoreni jednotlivych spotu v gridu\n\n\n  function Spot(y, x) {\n    this.y = y;\n    this.x = x;\n    this.isStart = this.y === START_ROW && this.x === START_COL;\n    this.isEnd = this.y === END_ROW && this.x === END_COL;\n    this.searched = false;\n    this.isPath = false;\n    this.isWall = false;\n  }\n\n  ; //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n\n  const fillPath = (grid, path) => {\n    for (let i = 0; i < path.length; i++) {\n      grid[path[i][0]][path[i][1]].isPath = true;\n    }\n  };\n\n  const onDrop = e => {\n    e.preventDefault();\n    let data = e.dataTransfer.getData(\"text\");\n    const el = document.getElementById(data);\n\n    if (el.className === \"node node_start\") {\n      let scords = e.nativeEvent.srcElement.id;\n      let startcords = scords.split(\"-\");\n      setStartCords(startcords);\n    } else {\n      let ecords = e.nativeEvent.srcElement.id;\n      let endcords = ecords.split(\"-\");\n      setEndCords(endcords);\n    }\n\n    e.nativeEvent.target.draggable = el.draggable;\n    e.nativeEvent.target.className = el.className;\n    el.draggable = false;\n    el.className = \"node\";\n  };\n\n  const onDragOver = e => {\n    e.preventDefault();\n  };\n\n  const onClickTrue = e => {\n    setTogglePath(1);\n  };\n\n  const onClickFalse = e => {\n    setTogglePath(0);\n  };\n\n  const onClick = e => {\n    if (e.target.classList[1] === undefined) {\n      let memPos = e.target.id;\n      let pos = memPos.split(\"-\"); // setWallCords(pos);\n\n      setWall(wall, pos, grid);\n      e.target.attributes.class.value = \"node node_wall\";\n      initalizeGrid();\n    }\n\n    if (e.target.classList[1] === \"node_wall\" || e.target.classList[1] === \"node_path\") {\n      let memPos = e.target.id;\n      let pos = memPos.split(\"-\"); // setDeleteWallCords(pos);\n\n      delWall(wall, pos);\n      e.target.attributes.class.value = \"node \";\n      initalizeGrid();\n    } else {\n      e.preventDefault();\n    }\n  }; // Funkce na vykresleni gridu\n\n\n  const gridwithNode = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Grid\",\n    onDrop: e => onDrop(e),\n    onDragOver: e => onDragOver(e),\n    onClick: e => onClick(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, Grid.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIndex,\n      className: \"rowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, row.map((col, colIndex) => {\n      const {\n        isStart,\n        isEnd,\n        searched,\n        isPath,\n        isWall\n      } = col;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: colIndex,\n        isPath: isPath,\n        isWall: isWall,\n        isStart: isStart,\n        isEnd: isEnd,\n        searched: searched,\n        row: rowIndex,\n        col: colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 33\n        }\n      });\n    }));\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, \"Pathfinding\"), gridwithNode, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => onClickTrue(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"Show path\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => onClickFalse(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, \"Hide path\"));\n};\n\nexport default Pathfind;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","BFS","drawPath","cols","rows","grid","wall","delWall","deleteWallCords","y","x","forEach","el","idx","splice","setWall","wallCords","push","console","log","isWall","Pathfind","Grid","setGrid","togglePath","setTogglePath","startCords","setStartCords","endCords","setEndCords","setWallCords","setDeleteWallCords","START_ROW","START_COL","END_ROW","END_COL","initalizeGrid","i","j","Spot","start","end","dict","path","fillPath","isStart","isEnd","searched","isPath","length","onDrop","e","preventDefault","data","dataTransfer","getData","document","getElementById","className","scords","nativeEvent","srcElement","id","startcords","split","ecords","endcords","target","draggable","onDragOver","onClickTrue","onClickFalse","onClick","classList","undefined","memPos","pos","attributes","class","value","gridwithNode","map","row","rowIndex","col","colIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, drawPath } from './Bfs';\n\n//GLOBAL\nconst cols = 10;\nconst rows = 10;\nlet grid;\nlet wall = [];\n\n\nconst delWall = (wall, deleteWallCords) => {\n    let y = deleteWallCords[0];\n    let x = deleteWallCords[1];\n\n    wall.forEach((el, idx) => {\n        if (el[0] === y && el[1] === x) {\n            wall.splice(idx, 1);\n        }\n    })\n}\n\nconst setWall = (wall, wallCords, grid) => {\n    wall.push(wallCords);\n\n    console.log(wallCords)\n\n    wall.forEach((el) => {\n        console.log(el)\n        grid[el[0]][el[1]].isWall = true;\n    })\n}\n\nconst Pathfind = () => {\n    const [Grid, setGrid] = useState([]);\n    const [togglePath, setTogglePath] = useState(0);\n    const [startCords, setStartCords] = useState([0, 0]);\n    const [endCords, setEndCords] = useState([rows - 1, cols - 1]);\n    const [wallCords, setWallCords] = useState([]);\n    const [deleteWallCords, setDeleteWallCords] = useState([]);\n\n    const START_ROW = startCords[0];\n    const START_COL = startCords[1];\n    const END_ROW = endCords[0];\n    const END_COL = endCords[1];\n\n    useEffect(() => {\n        initalizeGrid();\n    }, [togglePath, startCords, endCords]);\n\n    //Inicializace gridu\n    const initalizeGrid = () => {\n        grid = [];\n\n        //Filling grid with spots\n        for (let i = 0; i < rows; i++) {\n            grid[i] = [];\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Spot(i, j);\n            }\n        }\n\n        let start = grid[START_ROW][START_COL];\n        let end = grid[END_ROW][END_COL];\n\n        setGrid(grid);\n\n        const dict = BFS(grid, start, end);\n        const path = drawPath(dict, [start.y, start.x], [end.y, end.x]);\n\n        if (togglePath === 1) {\n            fillPath(grid, path);\n        }\n    };\n\n    // Vytvoreni jednotlivych spotu v gridu\n    function Spot(y, x) {\n        this.y = y;\n        this.x = x;\n        this.isStart = this.y === START_ROW && this.x === START_COL;\n        this.isEnd = this.y === END_ROW && this.x === END_COL;\n        this.searched = false;\n        this.isPath = false;\n        this.isWall = false;\n    };\n\n    //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n    const fillPath = (grid, path) => {\n        for (let i = 0; i < path.length; i++) {\n            grid[path[i][0]][path[i][1]].isPath = true;\n        }\n    }\n\n    const onDrop = (e) => {\n        e.preventDefault();\n        let data = e.dataTransfer.getData(\"text\");\n        const el = document.getElementById(data);\n\n        if (el.className === \"node node_start\") {\n            let scords = e.nativeEvent.srcElement.id;\n            let startcords = scords.split(\"-\");\n            setStartCords(startcords);\n        } else {\n            let ecords = e.nativeEvent.srcElement.id;\n            let endcords = ecords.split(\"-\");\n            setEndCords(endcords);\n        }\n\n        e.nativeEvent.target.draggable = el.draggable\n        e.nativeEvent.target.className = el.className\n\n        el.draggable = false;\n        el.className = \"node\";\n    }\n\n    const onDragOver = (e) => {\n        e.preventDefault();\n    }\n\n    const onClickTrue = (e) => {\n        setTogglePath(1)\n    }\n\n    const onClickFalse = (e) => {\n        setTogglePath(0)\n    }\n\n    const onClick = (e) => {\n        if (e.target.classList[1] === undefined) {\n            let memPos = e.target.id;\n            let pos = memPos.split(\"-\");\n            // setWallCords(pos);\n            setWall(wall, pos, grid);\n            e.target.attributes.class.value = \"node node_wall\"\n            initalizeGrid();\n        }\n\n        if (e.target.classList[1] === \"node_wall\" || e.target.classList[1] === \"node_path\") {\n            let memPos = e.target.id;\n            let pos = memPos.split(\"-\");\n            // setDeleteWallCords(pos);\n            delWall(wall, pos);\n            e.target.attributes.class.value = \"node \";\n            initalizeGrid();\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    // Funkce na vykresleni gridu\n    const gridwithNode = (\n        <div className=\"Grid\" onDrop={(e) => (onDrop(e))} onDragOver={(e) => (onDragOver(e))}\n            onClick={(e) => (onClick(e))}\n        >\n            {Grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='rowWrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd, searched, isPath, isWall } = col;\n                            return (\n                                <Node key={colIndex}\n                                    isPath={isPath}\n                                    isWall={isWall}\n                                    isStart={isStart}\n                                    isEnd={isEnd}\n                                    searched={searched}\n                                    row={rowIndex}\n                                    col={colIndex}\n                                />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n    return (\n        <div className='Wrapper'>\n            <h1>Pathfinding</h1>\n            {/* Vykresleni gridu */}\n            {gridwithNode}\n            <button onClick={(e) => onClickTrue(e)}>Show path</button>\n            <button onClick={(e) => onClickFalse(e)}>Hide path</button>\n        </div >\n    )\n}\n\nexport default Pathfind\n"]},"metadata":{},"sourceType":"module"}