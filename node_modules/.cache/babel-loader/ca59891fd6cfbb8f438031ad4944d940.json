{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Bfs.js\";\nimport React from 'react';\n\nfunction Bfs({\n  cols,\n  rows\n}) {\n  const grid = [];\n\n  function Node(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  ;\n\n  const createGrid = () => {\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array();\n\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Node(i, j);\n      }\n    }\n\n    return grid;\n  };\n\n  const findNeighbors = (grid, cord) => {\n    let neighbors = []; //Nahoru\n\n    if (cord[0] + 1 < grid.length) {\n      neighbors.push([cord[0] + 1, cord[1]]);\n    } //Dolu\n\n\n    if (cord[0] - 1 >= 0) {\n      neighbors.push([cord[0] - 1, cord[1]]);\n    } //Doleva\n\n\n    if (cord[1] - 1 >= 0) {\n      neighbors.push([cord[0], cord[1] - 1]);\n    } //Doprava\n\n\n    if (cord[1] + 1 < grid[0].length) {\n      neighbors.push([cord[0], cord[1] + 1]);\n    }\n\n    fillNeighbors(neighbors);\n    return neighbors;\n  };\n\n  const fillNeighbors = neigh => {\n    neigh.forEach((el, idx, arr) => {\n      // console.log(el[0])\n      let x = el[0];\n      let y = el[1];\n      arr[idx] = new Node(x, y);\n    });\n  };\n\n  createGrid();\n  const start = grid[0][0];\n  const end = grid[2][2];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default Bfs;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Bfs.js"],"names":["React","Bfs","cols","rows","grid","Node","x","y","createGrid","i","Array","j","findNeighbors","cord","neighbors","length","push","fillNeighbors","neigh","forEach","el","idx","arr","start","end"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\n\nfunction Bfs({ cols, rows }) {\n    const grid = [];\n\n    function Node(x, y) {\n        this.x = x;\n        this.y = y;\n    };\n\n    const createGrid = () => {\n        for (let i = 0; i < rows; i++) {\n            grid[i] = new Array();\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Node(i, j);\n            }\n        }\n\n        return grid;\n    }\n\n    const findNeighbors = (grid, cord) => {\n        let neighbors = [];\n\n        //Nahoru\n        if (cord[0] + 1 < grid.length) {\n            neighbors.push([cord[0] + 1, cord[1]])\n        }\n\n        //Dolu\n        if (cord[0] - 1 >= 0) {\n            neighbors.push([cord[0] - 1, cord[1]])\n        }\n\n        //Doleva\n        if (cord[1] - 1 >= 0) {\n            neighbors.push([cord[0], cord[1] - 1])\n        }\n\n        //Doprava\n        if (cord[1] + 1 < grid[0].length) {\n            neighbors.push([cord[0], cord[1] + 1])\n        }\n\n        fillNeighbors(neighbors);\n\n        return neighbors;\n    };\n\n    const fillNeighbors = (neigh) => {\n        neigh.forEach((el, idx, arr) => {\n            // console.log(el[0])\n            let x = el[0];\n            let y = el[1];\n            arr[idx] = new Node(x, y);\n        });\n    };\n\n    createGrid();\n\n    const start = grid[0][0]\n    const end = grid[2][2]\n\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nexport default Bfs\n"]},"metadata":{},"sourceType":"module"}