{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js\";\nimport React, { useState, useEffect } from 'react'; // import uniqueId from 'react-html-id'\n\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, showPath } from './Bfs'; //GLOBAL\n\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]); // const [targetDiv, setTargetDiv] = useState(\"\");\n\n  useEffect(() => {\n    initalizeGrid();\n  }, []); //Inicializace gridu\n\n  const initalizeGrid = () => {\n    const grid = []; //Filling grid with spots\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = [];\n\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n\n    setGrid(grid);\n  };\n\n  const startFinding = Grid => {\n    if (Grid.length > 0) {\n      const start = Grid[START_ROW][START_COL];\n      const end = Grid[END_ROW][END_COL];\n      const dict = BFS(Grid, start, end);\n      const path = showPath(dict, [start.y, start.x], [end.y, end.x]);\n      fillPath(Grid, path);\n    }\n  }; // Vytvoreni jednotlivych spotu v gridu\n\n\n  function Spot(y, x) {\n    this.y = y;\n    this.x = x;\n    this.isStart = this.y === START_ROW && this.x === START_COL;\n    this.isEnd = this.y === END_ROW && this.x === END_COL;\n    this.searched = false;\n    this.isPath = false;\n  }\n\n  ; //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n\n  const fillPath = (grid, path) => {\n    for (let i = 0; i < path.length; i++) {\n      grid[path[i][0]][path[i][1]].isPath = true;\n    }\n  };\n\n  const _onMouseDown = e => {\n    let targetDiv = e.nativeEvent; // console.log(targetDiv.target)\n  }; // Funkce na vykresleni gridu\n\n\n  const gridwithNode = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Grid\",\n    onMouseDown: _onMouseDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, Grid.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIndex,\n      className: \"rowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, row.map((col, colIndex) => {\n      const {\n        isStart,\n        isEnd,\n        searched,\n        isPath\n      } = col;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: colIndex,\n        isPath: isPath,\n        isStart: isStart,\n        isEnd: isEnd,\n        searched: searched,\n        row: rowIndex,\n        col: colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 33\n        }\n      });\n    }));\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Pathfinding\"), gridwithNode, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startFinding.bind(Grid, Grid),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \" Show me path\"));\n};\n\nexport default Pathfind;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","BFS","showPath","cols","rows","START_ROW","START_COL","END_ROW","END_COL","Pathfind","Grid","setGrid","initalizeGrid","grid","i","j","Spot","startFinding","length","start","end","dict","path","y","x","fillPath","isStart","isEnd","searched","isPath","_onMouseDown","e","targetDiv","nativeEvent","gridwithNode","map","row","rowIndex","col","colIndex","bind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import uniqueId from 'react-html-id'\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, showPath } from './Bfs';\n\n//GLOBAL\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\n\n\nconst Pathfind = () => {\n    const [Grid, setGrid] = useState([]);\n    // const [targetDiv, setTargetDiv] = useState(\"\");\n\n    useEffect(() => {\n        initalizeGrid();\n    }, []);\n\n    //Inicializace gridu\n    const initalizeGrid = () => {\n        const grid = [];\n\n        //Filling grid with spots\n        for (let i = 0; i < rows; i++) {\n            grid[i] = [];\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Spot(i, j);\n            }\n        }\n\n        setGrid(grid);\n    };\n\n    const startFinding = (Grid) => {\n        if (Grid.length > 0) {\n            const start = Grid[START_ROW][START_COL];\n            const end = Grid[END_ROW][END_COL];\n\n            const dict = BFS(Grid, start, end);\n            const path = showPath(dict, [start.y, start.x], [end.y, end.x]);\n\n            fillPath(Grid, path);\n        }\n    }\n\n    // Vytvoreni jednotlivych spotu v gridu\n    function Spot(y, x) {\n        this.y = y;\n        this.x = x;\n        this.isStart = this.y === START_ROW && this.x === START_COL;\n        this.isEnd = this.y === END_ROW && this.x === END_COL;\n        this.searched = false;\n        this.isPath = false;\n    };\n\n    //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n    const fillPath = (grid, path) => {\n        for (let i = 0; i < path.length; i++) {\n            grid[path[i][0]][path[i][1]].isPath = true;\n        }\n    }\n\n    const _onMouseDown = (e) => {\n        let targetDiv = e.nativeEvent;\n        // console.log(targetDiv.target)\n    }\n\n    // Funkce na vykresleni gridu\n    const gridwithNode = (\n        <div className=\"Grid\" onMouseDown={_onMouseDown}>\n            {Grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='rowWrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd, searched, isPath } = col;\n                            return (\n                                <Node key={colIndex} isPath={isPath} isStart={isStart} isEnd={isEnd} searched={searched} row={rowIndex} col={colIndex} />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n    return (\n        <div className='Wrapper'>\n            <h1>Pathfinding</h1>\n            {/* Vykresleni gridu */}\n            {gridwithNode}\n            <button onClick={startFinding.bind(Grid, Grid)}> Show me path</button>\n        </div>\n    )\n}\n\nexport default Pathfind\n"]},"metadata":{},"sourceType":"module"}