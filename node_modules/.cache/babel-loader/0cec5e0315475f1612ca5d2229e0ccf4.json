{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js\";\nimport React, { useState, useEffect } from 'react';\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, drawPath } from './Bfs'; //GLOBAL\n\nconst cols = 10;\nconst rows = 10;\nlet wall = [];\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  const [togglePath, setTogglePath] = useState(0);\n  const [startCords, setStartCords] = useState([0, 0]);\n  const [endCords, setEndCords] = useState([rows - 1, cols - 1]);\n  const [wallCords, setWallCords] = useState([]);\n  const [deleteWallCords, setDeleteWallCords] = useState([]);\n  const START_ROW = startCords[0];\n  const START_COL = startCords[1];\n  const END_ROW = endCords[0];\n  const END_COL = endCords[1]; // let WALL_ROW = wallCords[0];\n  // let WALL_COL = wallCords[1];\n\n  useEffect(() => {\n    initalizeGrid();\n  }, [togglePath, startCords, endCords, wallCords, deleteWallCords]); //Inicializace gridu\n\n  const initalizeGrid = () => {\n    const grid = []; //Filling grid with spots\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = [];\n\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n\n    wall.forEach((el, idx, arr) => {\n      console.log(arr[idx]);\n      arr[idx] = new WallObj(el[0], el[1]);\n    });\n    let start = grid[START_ROW][START_COL];\n    let end = grid[END_ROW][END_COL];\n\n    if (wallCords.length >= 2) {\n      wall.forEach(el => {\n        // grid[el[0].y][el[1]].isWall = true;\n        console.log(el);\n      });\n    } // console.log(wall)\n\n\n    setGrid(grid);\n    const dict = BFS(grid, start, end);\n    const path = drawPath(dict, [start.y, start.x], [end.y, end.x]);\n\n    if (togglePath === 1) {\n      fillPath(grid, path);\n    }\n  };\n\n  function WallObj(y, x) {\n    this.y = y;\n    this.x = x;\n    this.isSet = false;\n  } // Vytvoreni jednotlivych spotu v gridu\n\n\n  function Spot(y, x) {\n    this.y = y;\n    this.x = x;\n    this.isStart = this.y === START_ROW && this.x === START_COL;\n    this.isEnd = this.y === END_ROW && this.x === END_COL;\n    this.searched = false;\n    this.isPath = false;\n    this.isWall = false;\n  }\n\n  ; //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n\n  const fillPath = (grid, path) => {\n    for (let i = 0; i < path.length; i++) {\n      grid[path[i][0]][path[i][1]].isPath = true;\n    }\n  };\n\n  const onDrop = e => {\n    e.preventDefault();\n    let data = e.dataTransfer.getData(\"text\");\n    const el = document.getElementById(data);\n\n    if (el.className === \"node node_start\") {\n      let scords = e.nativeEvent.srcElement.id;\n      let startcords = scords.split(\"-\");\n      setStartCords(startcords);\n    } else {\n      let ecords = e.nativeEvent.srcElement.id;\n      let endcords = ecords.split(\"-\");\n      setEndCords(endcords);\n    }\n\n    e.nativeEvent.target.draggable = el.draggable;\n    e.nativeEvent.target.className = el.className;\n    el.draggable = false;\n    el.className = \"node\";\n  };\n\n  const onDragOver = e => {\n    e.preventDefault();\n  };\n\n  const onClickTrue = e => {\n    setTogglePath(1);\n  };\n\n  const onClickFalse = e => {\n    setTogglePath(0);\n  };\n\n  const onClick = e => {\n    let target = e.target.attributes.class.value;\n\n    if (target.length === 5) {\n      let memPos = e.target.id;\n      let pos = memPos.split(\"-\");\n      setWallCords(pos);\n      wall.push(pos);\n      e.target.attributes.class.value = \"node node_wall\";\n    }\n\n    if (target.length === 14) {\n      let memPos = e.target.id;\n      let pos = memPos.split(\"-\");\n      setDeleteWallCords(pos);\n      e.target.attributes.class.value = \"node \";\n    } else {\n      e.preventDefault();\n    }\n  }; // Funkce na vykresleni gridu\n\n\n  const gridwithNode = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Grid\",\n    onDrop: e => onDrop(e),\n    onDragOver: e => onDragOver(e),\n    onClick: e => onClick(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, Grid.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIndex,\n      className: \"rowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }, row.map((col, colIndex) => {\n      const {\n        isStart,\n        isEnd,\n        searched,\n        isPath,\n        isWall\n      } = col;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: colIndex,\n        isPath: isPath,\n        isWall: isWall,\n        isStart: isStart,\n        isEnd: isEnd,\n        searched: searched,\n        row: rowIndex,\n        col: colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 33\n        }\n      });\n    }));\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, \"Pathfinding\"), gridwithNode, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => onClickTrue(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"Show path\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => onClickFalse(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, \"Hide path\"));\n};\n\nexport default Pathfind;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","BFS","drawPath","cols","rows","wall","Pathfind","Grid","setGrid","togglePath","setTogglePath","startCords","setStartCords","endCords","setEndCords","wallCords","setWallCords","deleteWallCords","setDeleteWallCords","START_ROW","START_COL","END_ROW","END_COL","initalizeGrid","grid","i","j","Spot","forEach","el","idx","arr","console","log","WallObj","start","end","length","dict","path","y","x","fillPath","isSet","isStart","isEnd","searched","isPath","isWall","onDrop","e","preventDefault","data","dataTransfer","getData","document","getElementById","className","scords","nativeEvent","srcElement","id","startcords","split","ecords","endcords","target","draggable","onDragOver","onClickTrue","onClickFalse","onClick","attributes","class","value","memPos","pos","push","gridwithNode","map","row","rowIndex","col","colIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, drawPath } from './Bfs';\n\n//GLOBAL\nconst cols = 10;\nconst rows = 10;\nlet wall = [];\n\n\nconst Pathfind = () => {\n    const [Grid, setGrid] = useState([]);\n    const [togglePath, setTogglePath] = useState(0);\n    const [startCords, setStartCords] = useState([0, 0])\n    const [endCords, setEndCords] = useState([rows - 1, cols - 1])\n    const [wallCords, setWallCords] = useState([])\n    const [deleteWallCords, setDeleteWallCords] = useState([]);\n\n    const START_ROW = startCords[0];\n    const START_COL = startCords[1];\n    const END_ROW = endCords[0];\n    const END_COL = endCords[1];\n    // let WALL_ROW = wallCords[0];\n    // let WALL_COL = wallCords[1];\n\n    useEffect(() => {\n        initalizeGrid();\n    }, [togglePath, startCords, endCords, wallCords, deleteWallCords]);\n\n    //Inicializace gridu\n    const initalizeGrid = () => {\n        const grid = [];\n\n        //Filling grid with spots\n        for (let i = 0; i < rows; i++) {\n            grid[i] = [];\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Spot(i, j);\n            }\n        }\n\n        wall.forEach((el, idx, arr) => {\n            console.log(arr[idx])\n            arr[idx] = new WallObj(el[0], el[1]);\n        })\n\n        let start = grid[START_ROW][START_COL];\n        let end = grid[END_ROW][END_COL];\n\n        if (wallCords.length >= 2) {\n            wall.forEach((el) => {\n                // grid[el[0].y][el[1]].isWall = true;\n                console.log(el)\n            })\n        }\n\n        // console.log(wall)\n\n        setGrid(grid);\n\n        const dict = BFS(grid, start, end);\n        const path = drawPath(dict, [start.y, start.x], [end.y, end.x]);\n\n        if (togglePath === 1) {\n            fillPath(grid, path);\n        }\n    };\n\n    function WallObj(y, x) {\n        this.y = y;\n        this.x = x;\n        this.isSet = false;\n    }\n\n    // Vytvoreni jednotlivych spotu v gridu\n    function Spot(y, x) {\n        this.y = y;\n        this.x = x;\n        this.isStart = this.y === START_ROW && this.x === START_COL;\n        this.isEnd = this.y === END_ROW && this.x === END_COL;\n        this.searched = false;\n        this.isPath = false;\n        this.isWall = false;\n    };\n\n    //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n    const fillPath = (grid, path) => {\n        for (let i = 0; i < path.length; i++) {\n            grid[path[i][0]][path[i][1]].isPath = true;\n        }\n    }\n\n    const onDrop = (e) => {\n        e.preventDefault();\n        let data = e.dataTransfer.getData(\"text\");\n        const el = document.getElementById(data);\n\n        if (el.className === \"node node_start\") {\n            let scords = e.nativeEvent.srcElement.id;\n            let startcords = scords.split(\"-\");\n            setStartCords(startcords);\n        } else {\n            let ecords = e.nativeEvent.srcElement.id;\n            let endcords = ecords.split(\"-\");\n            setEndCords(endcords);\n        }\n\n        e.nativeEvent.target.draggable = el.draggable\n        e.nativeEvent.target.className = el.className\n\n        el.draggable = false;\n        el.className = \"node\";\n    }\n\n    const onDragOver = (e) => {\n        e.preventDefault();\n    }\n\n    const onClickTrue = (e) => {\n        setTogglePath(1)\n    }\n\n    const onClickFalse = (e) => {\n        setTogglePath(0)\n    }\n\n    const onClick = (e) => {\n        let target = e.target.attributes.class.value;\n\n        if (target.length === 5) {\n            let memPos = e.target.id;\n            let pos = memPos.split(\"-\");\n            setWallCords(pos);\n            wall.push(pos);\n            e.target.attributes.class.value = \"node node_wall\"\n        }\n\n        if (target.length === 14) {\n            let memPos = e.target.id;\n            let pos = memPos.split(\"-\");\n            setDeleteWallCords(pos);\n            e.target.attributes.class.value = \"node \";\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    // Funkce na vykresleni gridu\n    const gridwithNode = (\n        <div className=\"Grid\" onDrop={(e) => (onDrop(e))} onDragOver={(e) => (onDragOver(e))}\n            onClick={(e) => (onClick(e))}\n        >\n            {Grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='rowWrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd, searched, isPath, isWall } = col;\n                            return (\n                                <Node key={colIndex}\n                                    isPath={isPath}\n                                    isWall={isWall}\n                                    isStart={isStart}\n                                    isEnd={isEnd}\n                                    searched={searched}\n                                    row={rowIndex}\n                                    col={colIndex}\n                                />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n    return (\n        <div className='Wrapper'>\n            <h1>Pathfinding</h1>\n            {/* Vykresleni gridu */}\n            {gridwithNode}\n            <button onClick={(e) => onClickTrue(e)}>Show path</button>\n            <button onClick={(e) => onClickFalse(e)}>Hide path</button>\n        </div >\n    )\n}\n\nexport default Pathfind\n"]},"metadata":{},"sourceType":"module"}