{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js\";\nimport React, { useState, useEffect } from 'react'; // import uniqueId from 'react-html-id'\n\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS } from './Bfs';\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  useEffect(() => {\n    initalizeGrid();\n  }, []); //Vytvoreni gridu\n\n  const initalizeGrid = () => {\n    const grid = [];\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = [];\n\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n\n    const start = grid[START_ROW][START_COL];\n    const end = grid[END_ROW][END_COL];\n    setGrid(grid);\n    BFS(grid, start, end);\n  }; // Vytvoreni bodu\n\n\n  function Spot(x, y) {\n    this.x = x;\n    this.y = y;\n    this.isStart = this.x === START_ROW && this.y === START_COL;\n    this.isEnd = this.x === END_ROW && this.y === END_COL;\n    this.searched = false;\n    this.isPath = false;\n  }\n\n  ; // Vykresleni gridu\n\n  const gridwithNode = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, Grid.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIndex,\n      className: \"rowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, row.map((col, colIndex) => {\n      const {\n        isStart,\n        isEnd,\n        isPath,\n        searched\n      } = col;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: colIndex,\n        isStart: isStart,\n        isEnd: isEnd,\n        isPath: isPath,\n        searched: searched,\n        row: rowIndex,\n        col: colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }\n      });\n    }));\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Pathfinding\"), gridwithNode);\n};\n\nexport default Pathfind;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","BFS","cols","rows","START_ROW","START_COL","END_ROW","END_COL","Pathfind","Grid","setGrid","initalizeGrid","grid","i","j","Spot","start","end","x","y","isStart","isEnd","searched","isPath","gridwithNode","map","row","rowIndex","col","colIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import uniqueId from 'react-html-id'\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS } from './Bfs';\n\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\n\n\nconst Pathfind = () => {\n    const [Grid, setGrid] = useState([]);\n\n    useEffect(() => {\n        initalizeGrid();\n    }, []);\n\n    //Vytvoreni gridu\n    const initalizeGrid = () => {\n        const grid = [];\n\n        for (let i = 0; i < rows; i++) {\n            grid[i] = [];\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Spot(i, j);\n            }\n        }\n\n        const start = grid[START_ROW][START_COL];\n        const end = grid[END_ROW][END_COL];\n\n        setGrid(grid);\n\n        BFS(grid, start, end);\n    };\n\n    // Vytvoreni bodu\n    function Spot(x, y) {\n        this.x = x;\n        this.y = y;\n        this.isStart = this.x === START_ROW && this.y === START_COL;\n        this.isEnd = this.x === END_ROW && this.y === END_COL;\n        this.searched = false;\n        this.isPath = false;\n    };\n\n    // Vykresleni gridu\n    const gridwithNode = (\n        <div>\n            {Grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='rowWrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd, isPath, searched } = col;\n                            return (\n                                <Node key={colIndex} isStart={isStart} isEnd={isEnd} isPath={isPath} searched={searched} row={rowIndex} col={colIndex} />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n    return (\n        <div className='Wrapper'>\n            <h1>Pathfinding</h1>\n            {gridwithNode}\n        </div>\n    )\n}\n\nexport default Pathfind\n"]},"metadata":{},"sourceType":"module"}