{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js\";\nimport React, { useState, useEffect } from 'react';\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, drawPath } from './Bfs'; //GLOBAL\n\nconst cols = 38;\nconst rows = 20;\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  const [togglePath, setTogglePath] = useState(0);\n  const [startCords, setStartCords] = useState([0, 0]);\n  const [endCords, setEndCords] = useState([19, 37]);\n  const START_ROW = startCords[0];\n  const START_COL = startCords[1];\n  const END_ROW = endCords[0];\n  const END_COL = endCords[1];\n  useEffect(() => {\n    initalizeGrid();\n  }, [togglePath]); //Inicializace gridu\n\n  const initalizeGrid = () => {\n    const grid = []; //Filling grid with spots\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = [];\n\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n\n    let start = grid[START_ROW][START_COL];\n    start.isStart = true;\n    let end = grid[END_ROW][END_COL];\n    end.isEnd = true;\n    console.log(start);\n    console.log(end);\n    setGrid(grid);\n    const dict = BFS(grid, start, end);\n    const path = drawPath(dict, [start.y, start.x], [end.y, end.x]);\n\n    if (togglePath === 1) {\n      fillPath(grid, path);\n    }\n  }; // Vytvoreni jednotlivych spotu v gridu\n\n\n  function Spot(y, x) {\n    this.y = y;\n    this.x = x;\n    this.isStart = false;\n    this.isEnd = false;\n    this.searched = false;\n    this.isPath = false;\n  }\n\n  ; //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n\n  const fillPath = (grid, path) => {\n    for (let i = 0; i < path.length; i++) {\n      grid[path[i][0]][path[i][1]].isPath = true;\n    }\n  };\n\n  const onDrop = e => {\n    e.preventDefault();\n    let data = e.dataTransfer.getData(\"text\");\n    e.target.appendChild(document.getElementById(data));\n\n    if (data === '0-0') {\n      let cords = e.nativeEvent.srcElement.id;\n      let startcords = cords.split(\"-\");\n      setStartCords(startcords);\n    } else {\n      let cords = e.nativeEvent.srcElement.id;\n      let endcords = cords.split(\"-\");\n      setEndCords(endcords);\n    }\n  }; // console.log(startCords[0])\n  // console.log(startCords[1])\n  // console.log(endCords[0])\n  // console.log(endCords[1])\n\n\n  const onDragOver = e => {\n    e.preventDefault();\n  }; // Funkce na vykresleni gridu\n\n\n  const gridwithNode = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Grid\",\n    onDrop: e => onDrop(e),\n    onDragOver: e => onDragOver(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, Grid.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIndex,\n      className: \"rowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, row.map((col, colIndex) => {\n      const {\n        isStart,\n        isEnd,\n        searched,\n        isPath\n      } = col;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: colIndex,\n        isPath: isPath,\n        isStart: isStart,\n        isEnd: isEnd,\n        searched: searched,\n        row: rowIndex,\n        col: colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 33\n        }\n      });\n    }));\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Pathfinding\"), gridwithNode, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setTogglePath(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Show path\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setTogglePath(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Hide path\"));\n};\n\nexport default Pathfind;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","BFS","drawPath","cols","rows","Pathfind","Grid","setGrid","togglePath","setTogglePath","startCords","setStartCords","endCords","setEndCords","START_ROW","START_COL","END_ROW","END_COL","initalizeGrid","grid","i","j","Spot","start","isStart","end","isEnd","console","log","dict","path","y","x","fillPath","searched","isPath","length","onDrop","e","preventDefault","data","dataTransfer","getData","target","appendChild","document","getElementById","cords","nativeEvent","srcElement","id","startcords","split","endcords","onDragOver","gridwithNode","map","row","rowIndex","col","colIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, drawPath } from './Bfs';\n\n//GLOBAL\nconst cols = 38;\nconst rows = 20;\n\n\nconst Pathfind = () => {\n    const [Grid, setGrid] = useState([]);\n    const [togglePath, setTogglePath] = useState(0);\n    const [startCords, setStartCords] = useState([0, 0])\n    const [endCords, setEndCords] = useState([19, 37])\n\n\n    const START_ROW = startCords[0];\n    const START_COL = startCords[1];\n    const END_ROW = endCords[0];\n    const END_COL = endCords[1];\n\n    useEffect(() => {\n        initalizeGrid();\n    }, [togglePath]);\n\n    //Inicializace gridu\n    const initalizeGrid = () => {\n        const grid = [];\n\n        //Filling grid with spots\n        for (let i = 0; i < rows; i++) {\n            grid[i] = [];\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Spot(i, j);\n            }\n        }\n\n        let start = grid[START_ROW][START_COL];\n        start.isStart = true;\n        let end = grid[END_ROW][END_COL];\n        end.isEnd = true;\n\n        console.log(start)\n        console.log(end)\n\n        setGrid(grid);\n\n        const dict = BFS(grid, start, end);\n        const path = drawPath(dict, [start.y, start.x], [end.y, end.x]);\n\n        if (togglePath === 1) {\n            fillPath(grid, path);\n        }\n    };\n\n    // Vytvoreni jednotlivych spotu v gridu\n    function Spot(y, x) {\n        this.y = y;\n        this.x = x;\n        this.isStart = false;\n        this.isEnd = false;\n        this.searched = false;\n        this.isPath = false;\n    };\n\n    //Nasteveni promene isPath v kazdem spotu ktery je soucasti cesty na true\n    const fillPath = (grid, path) => {\n        for (let i = 0; i < path.length; i++) {\n            grid[path[i][0]][path[i][1]].isPath = true;\n        }\n    }\n\n    const onDrop = (e) => {\n        e.preventDefault();\n        let data = e.dataTransfer.getData(\"text\");\n        e.target.appendChild(document.getElementById(data));\n        if (data === '0-0') {\n            let cords = e.nativeEvent.srcElement.id;\n            let startcords = cords.split(\"-\");\n            setStartCords(startcords);\n        } else {\n            let cords = e.nativeEvent.srcElement.id;\n            let endcords = cords.split(\"-\");\n            setEndCords(endcords);\n        }\n    }\n\n    // console.log(startCords[0])\n    // console.log(startCords[1])\n\n\n    // console.log(endCords[0])\n    // console.log(endCords[1])\n\n    const onDragOver = (e) => {\n        e.preventDefault();\n    }\n\n    // Funkce na vykresleni gridu\n    const gridwithNode = (\n        <div className=\"Grid\" onDrop={(e) => (onDrop(e))} onDragOver={(e) => (onDragOver(e))}>\n            {Grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='rowWrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd, searched, isPath } = col;\n                            return (\n                                <Node key={colIndex}\n                                    isPath={isPath}\n                                    isStart={isStart}\n                                    isEnd={isEnd}\n                                    searched={searched}\n                                    row={rowIndex}\n                                    col={colIndex}\n                                />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n    return (\n        <div className='Wrapper'>\n            <h1>Pathfinding</h1>\n            {/* Vykresleni gridu */}\n            {gridwithNode}\n            <button onClick={() => setTogglePath(1)}>Show path</button>\n            <button onClick={() => setTogglePath(0)}>Hide path</button>\n        </div >\n    )\n}\n\nexport default Pathfind\n"]},"metadata":{},"sourceType":"module"}