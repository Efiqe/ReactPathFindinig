{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js\";\nimport React, { useState, useEffect } from 'react'; // import uniqueId from 'react-html-id'\n\nimport Node from './Node';\nimport './Pathfind.css';\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\nconst start = grid[0][0];\nconst end = grid[2][2];\n\nconst Pathfind = props => {\n  const [Grid, setGrid] = useState([]);\n  useEffect(() => {\n    initalizeGrid();\n  }, []);\n\n  const initalizeGrid = () => {\n    const grid = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array(cols);\n    }\n\n    createSpot(grid);\n    setGrid(grid);\n  };\n\n  const findNeighBours = (grid, cord) => {\n    let neighbors = []; // const row = 2;\n    // const col = 2;\n    //Nahoru\n\n    if (cord[0] + 1 < grid.length) {\n      neighbors.push([cord[0] + 1, cord[1]]);\n    } //Dolu\n\n\n    if (cord[0] - 1 >= 0) {\n      neighbors.push([cord[0] - 1, cord[1]]);\n    } //Doleva\n\n\n    if (cord[1] - 1 >= 0) {\n      neighbors.push([cord[0], cord[1] - 1]);\n    } //Doprava\n\n\n    if (cord[1] + 1 < grid[0].length) {\n      neighbors.push([cord[0], cord[1] + 1]);\n    }\n\n    fillNeighbors(neighbors);\n    return neighbors;\n  };\n\n  const fillNeighbors = neigh => {\n    neigh.forEach((el, idx, arr) => {\n      // console.log(el[0])\n      let x = el[0];\n      let y = el[1];\n      arr[idx] = new Spot(x, y);\n    });\n  };\n\n  const createSpot = grid => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n  };\n\n  function Spot(x, y) {\n    this.x = x;\n    this.y = y;\n    this.isStart = this.x === START_ROW && this.y === START_COL;\n    this.isEnd = this.x === END_ROW && this.y === END_COL;\n    this.g = 0;\n    this.f = 0;\n    this.h = 0;\n  }\n\n  ;\n  const gridwithNode = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, Grid.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIndex,\n      className: \"rowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, row.map((col, colIndex) => {\n      const {\n        isStart,\n        isEnd\n      } = col;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: colIndex,\n        isStart: isStart,\n        isEnd: isEnd,\n        row: rowIndex,\n        col: colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 33\n        }\n      });\n    }));\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Pathfinding\"), gridwithNode);\n};\n\nexport default Pathfind;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","cols","rows","START_ROW","START_COL","END_ROW","END_COL","start","grid","end","Pathfind","props","Grid","setGrid","initalizeGrid","Array","i","createSpot","findNeighBours","cord","neighbors","length","push","fillNeighbors","neigh","forEach","el","idx","arr","x","y","Spot","j","isStart","isEnd","g","f","h","gridwithNode","map","row","rowIndex","col","colIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import uniqueId from 'react-html-id'\nimport Node from './Node';\nimport './Pathfind.css';\n\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\n\n\nconst start = grid[0][0]\nconst end = grid[2][2]\n\n\nconst Pathfind = (props) => {\n    const [Grid, setGrid] = useState([]);\n\n    useEffect(() => {\n        initalizeGrid();\n    }, []);\n\n    const initalizeGrid = () => {\n        const grid = new Array(rows);\n\n        for (let i = 0; i < rows; i++) {\n            grid[i] = new Array(cols);\n        }\n\n        createSpot(grid);\n\n        setGrid(grid);\n    };\n\n    const findNeighBours = (grid, cord) => {\n        let neighbors = [];\n        // const row = 2;\n        // const col = 2;\n\n        //Nahoru\n        if (cord[0] + 1 < grid.length) {\n            neighbors.push([cord[0] + 1, cord[1]])\n        }\n\n        //Dolu\n        if (cord[0] - 1 >= 0) {\n            neighbors.push([cord[0] - 1, cord[1]])\n        }\n\n        //Doleva\n        if (cord[1] - 1 >= 0) {\n            neighbors.push([cord[0], cord[1] - 1])\n        }\n\n        //Doprava\n        if (cord[1] + 1 < grid[0].length) {\n            neighbors.push([cord[0], cord[1] + 1])\n        }\n\n        fillNeighbors(neighbors);\n\n        return neighbors;\n    };\n\n    const fillNeighbors = (neigh) => {\n        neigh.forEach((el, idx, arr) => {\n            // console.log(el[0])\n            let x = el[0];\n            let y = el[1];\n            arr[idx] = new Spot(x, y);\n        });\n    };\n\n    const createSpot = (grid) => {\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Spot(i, j);\n            }\n        }\n    };\n\n    function Spot(x, y) {\n        this.x = x;\n        this.y = y;\n        this.isStart = this.x === START_ROW && this.y === START_COL;\n        this.isEnd = this.x === END_ROW && this.y === END_COL;\n        this.g = 0;\n        this.f = 0;\n        this.h = 0;\n    };\n\n    const gridwithNode = (\n        <div>\n            {Grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='rowWrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd } = col;\n                            return (\n                                <Node key={colIndex} isStart={isStart} isEnd={isEnd} row={rowIndex} col={colIndex} />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n    return (\n        <div className='Wrapper'>\n            <h1>Pathfinding</h1>\n            {gridwithNode}\n        </div>\n    )\n}\n\nexport default Pathfind\n"]},"metadata":{},"sourceType":"module"}