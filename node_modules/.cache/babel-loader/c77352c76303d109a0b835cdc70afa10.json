{"ast":null,"code":"var _jsxFileName = \"/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js\";\nimport React, { useState, useEffect } from 'react'; // import uniqueId from 'react-html-id'\n\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, showPath } from './Bfs';\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  useEffect(() => {\n    initalizeGrid();\n  }, []); //Vytvoreni gridu\n\n  const initalizeGrid = () => {\n    const grid = []; //Filling grid with spots\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = [];\n\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n\n    const start = grid[START_ROW][START_COL];\n    const end = grid[END_ROW][END_COL];\n    setGrid(grid);\n    const dict = BFS(grid, start, end); // console.log(dict)\n\n    const path = showPath(dict, [start.y, start.x], [end.y, end.x]);\n    console.log(path);\n    console.log(path[0][0]);\n    console.log(grid[path[0][0]][path[0][0]]);\n  }; // Vytvoreni bodu\n\n\n  function Spot(y, x) {\n    this.y = y;\n    this.x = x;\n    this.isStart = this.x === START_ROW && this.y === START_COL;\n    this.isEnd = this.x === END_ROW && this.y === END_COL;\n    this.searched = false;\n    this.isPath = false;\n  }\n\n  ; //Naplneni cesty\n\n  const fillPath = (grid, path) => {\n    for (let i = 0; i < path.lenght; i++) {\n      for (let j = 0; j < path[i].lenght; j++) {\n        grid[path[i][j]][path[i][j]].isPath = false;\n      }\n    }\n  }; // Vykresleni gridu\n\n\n  const gridwithNode = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, Grid.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIndex,\n      className: \"rowWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, row.map((col, colIndex) => {\n      const {\n        isStart,\n        isEnd,\n        searched\n      } = col;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: colIndex,\n        isStart: isStart,\n        isEnd: isEnd,\n        searched: searched,\n        row: rowIndex,\n        col: colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 33\n        }\n      });\n    }));\n  })); // console.log(Grid)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Pathfinding\"), gridwithNode);\n};\n\nexport default Pathfind;","map":{"version":3,"sources":["/home/vojta-pc/Documents/FrontEnd/PathfindingBeta/pathfindinfbeta/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","BFS","showPath","cols","rows","START_ROW","START_COL","END_ROW","END_COL","Pathfind","Grid","setGrid","initalizeGrid","grid","i","j","Spot","start","end","dict","path","y","x","console","log","isStart","isEnd","searched","isPath","fillPath","lenght","gridwithNode","map","row","rowIndex","col","colIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import uniqueId from 'react-html-id'\nimport Node from './Node';\nimport './Pathfind.css';\nimport { BFS, showPath } from './Bfs';\n\nconst cols = 45;\nconst rows = 20;\nconst START_ROW = 0;\nconst START_COL = 0;\nconst END_ROW = rows - 1;\nconst END_COL = cols - 1;\n\n\nconst Pathfind = () => {\n    const [Grid, setGrid] = useState([]);\n\n    useEffect(() => {\n        initalizeGrid();\n    }, []);\n\n    //Vytvoreni gridu\n    const initalizeGrid = () => {\n        const grid = [];\n\n\n        //Filling grid with spots\n        for (let i = 0; i < rows; i++) {\n            grid[i] = [];\n            for (let j = 0; j < cols; j++) {\n                grid[i][j] = new Spot(i, j);\n            }\n        }\n\n        const start = grid[START_ROW][START_COL];\n        const end = grid[END_ROW][END_COL];\n\n        setGrid(grid);\n\n        const dict = BFS(grid, start, end);\n        // console.log(dict)\n        const path = showPath(dict, [start.y, start.x], [end.y, end.x]);\n        console.log(path);\n        console.log(path[0][0])\n        console.log(grid[path[0][0]][path[0][0]])\n    };\n\n    // Vytvoreni bodu\n    function Spot(y, x) {\n        this.y = y;\n        this.x = x;\n        this.isStart = this.x === START_ROW && this.y === START_COL;\n        this.isEnd = this.x === END_ROW && this.y === END_COL;\n        this.searched = false;\n        this.isPath = false;\n    };\n\n    //Naplneni cesty\n    const fillPath = (grid, path) => {\n        for (let i = 0; i < path.lenght; i++) {\n            for (let j = 0; j < path[i].lenght; j++) {\n                grid[path[i][j]][path[i][j]].isPath = false;\n            }\n        }\n    }\n\n    // Vykresleni gridu\n    const gridwithNode = (\n        <div>\n            {Grid.map((row, rowIndex) => {\n                return (\n                    <div key={rowIndex} className='rowWrapper'>\n                        {row.map((col, colIndex) => {\n                            const { isStart, isEnd, searched } = col;\n                            return (\n                                <Node key={colIndex} isStart={isStart} isEnd={isEnd} searched={searched} row={rowIndex} col={colIndex} />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n    // console.log(Grid)\n\n    return (\n        <div className='Wrapper'>\n            <h1>Pathfinding</h1>\n            {gridwithNode}\n        </div>\n    )\n}\n\nexport default Pathfind\n"]},"metadata":{},"sourceType":"module"}